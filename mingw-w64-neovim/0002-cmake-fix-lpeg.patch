diff --git a/cmake/FindLpeg.cmake b/cmake/FindLpeg.cmake
index 3d0ff592..7e6bca45 100644
--- a/cmake/FindLpeg.cmake
+++ b/cmake/FindLpeg.cmake
@@ -1,3 +1,4 @@
+set(CMAKE_FIND_LIBRARY_SUFFIXES .dll ${CMAKE_FIND_LIBRARY_SUFFIXES})
 find_library2(LPEG_LIBRARY NAMES lpeg_a lpeg liblpeg_a lpeg${CMAKE_SHARED_LIBRARY_SUFFIX} PATH_SUFFIXES lua/5.1)
 
 find_package_handle_standard_args(Lpeg DEFAULT_MSG LPEG_LIBRARY)
diff --git a/src/lpeg.h b/src/lpeg.h
new file mode 100644
index 00000000..53deb6df
--- /dev/null
+++ b/src/lpeg.h
@@ -0,0 +1,62 @@
+
+#include <stdio.h>
+#include <lua.h>
+#include <stdlib.h>
+
+#define __STR_OF__(x) #x
+#define __EXPAND_AND_QUOTE__(x) __STR_OF__(x)
+
+// for debugging only
+static void print_stack(lua_State* L)
+{
+  fprintf(stderr, "STACK:\n");
+  for(int i = 1; i <= lua_gettop(L); i++)
+  {
+    switch(lua_type(L, i))
+    {
+      case LUA_TSTRING:
+      case LUA_TNUMBER:
+        fprintf(stderr, "%d: %s\n", i, lua_tostring(L, i));
+        break;
+      case LUA_TBOOLEAN:
+        fprintf(stderr, "%d: %s\n", i, lua_toboolean(L, i) ? "true" : "false");
+        break;
+      default:
+        fprintf(stderr, "%d: (%s) %p\n", i, lua_typename(L, lua_type(L, i)), lua_topointer(L, i));
+        break;
+    }
+  }
+  fprintf(stderr, "\n");
+}
+
+static int _imp_luaopen_lpeg(lua_State* L)
+{
+  lua_getglobal(L, "package");
+  lua_getfield(L, -1, "loadlib");
+  lua_getfield(L, -2, "searchpath");
+  lua_pushliteral(L, "lpeg");
+  lua_getfield(L, -4, "cpath");
+  lua_pushliteral(L, ";");
+  lua_pushliteral(L, __EXPAND_AND_QUOTE__(LPEG_LIBRARY));
+  lua_concat(L, 3);
+  lua_call(L, 2, 1);
+  lua_pushliteral(L, "luaopen_lpeg");
+  lua_call(L, 2, 1);
+  lua_pushliteral(L, "lpeg");
+  lua_call(L, 1, 1);
+
+  return 1;
+}
+
+static inline int luaopen_lpeg(lua_State* L)
+{
+  lua_pushcfunction(L, _imp_luaopen_lpeg);
+  if(lua_pcall(L, 0, 1, 0))
+  {
+    fprintf(stderr, "%s\n", lua_tostring(L, -1));
+    abort();
+    return 0;
+  }
+  lua_pushvalue(L, -1); // dummy value, because neovim doesn't call luaopen_lpeg cannoncially
+  return 1;
+}
diff --git a/src/nlua0.c b/src/nlua0.c
index 2cfa16b8..9dd11181 100644
--- a/src/nlua0.c
+++ b/src/nlua0.c
@@ -1,6 +1,7 @@
 #include <lua.h>
 
 #include "mpack/lmpack.h"
+#include "lpeg.h"
 
 LUA_API int luaopen_nlua0(lua_State* L);
 
@@ -9,7 +10,6 @@ LUA_API int luaopen_nlua0(lua_State* L) {
   luaopen_mpack(L);
   lua_setfield(L, -2, "mpack");
 
-  int luaopen_lpeg(lua_State *);
   luaopen_lpeg(L);
   lua_setfield(L, -3, "lpeg");
   lua_pop(L, 2);
diff --git a/src/nvim/CMakeLists.txt b/src/nvim/CMakeLists.txt
index d9cc695c..a5126007 100644
--- a/src/nvim/CMakeLists.txt
+++ b/src/nvim/CMakeLists.txt
@@ -39,11 +39,11 @@ find_package(Unibilium 2.0 REQUIRED)
 target_link_libraries(main_lib INTERFACE
   iconv
   libvterm
-  lpeg
   msgpack
   treesitter
   unibilium)
-target_link_libraries(nlua0 PUBLIC lpeg)
+
+add_compile_definitions("-DLPEG_LIBRARY=${LPEG_LIBRARY}")
 
 if(ENABLE_LIBINTL)
   find_package(Libintl REQUIRED) # Libintl (not Intl) selects our FindLibintl.cmake script. #8464
@@ -244,7 +244,7 @@ if(CI_BUILD)
   if(MSVC)
     target_compile_options(main_lib INTERFACE -WX)
   else()
-    target_compile_options(main_lib INTERFACE -Werror)
+    target_compile_options(main_lib INTERFACE -Wall)
   endif()
 endif()
 
diff --git a/src/nvim/lua/stdlib.c b/src/nvim/lua/stdlib.c
index 22ee0a1c..1e2339df 100644
--- a/src/nvim/lua/stdlib.c
+++ b/src/nvim/lua/stdlib.c
@@ -12,6 +12,8 @@
 # include "bit.h"
 #endif
 
+#include "lpeg.h"
+
 #include "cjson/lua_cjson.h"
 #include "mpack/lmpack.h"
 #include "nvim/api/private/defs.h"
@@ -648,7 +650,6 @@ void nlua_state_add_stdlib(lua_State *const lstate, bool is_thread)
   lua_pop(lstate, 3);
 
   // vim.lpeg
-  int luaopen_lpeg(lua_State *);
   luaopen_lpeg(lstate);
   lua_pushvalue(lstate, -1);
   lua_setfield(lstate, -4, "lpeg");
